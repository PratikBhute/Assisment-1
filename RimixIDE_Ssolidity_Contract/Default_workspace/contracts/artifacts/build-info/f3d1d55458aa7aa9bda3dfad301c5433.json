{
	"id": "f3d1d55458aa7aa9bda3dfad301c5433",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/assert-test-method.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >= 0.7.0 < 0.9.0;\r\n\r\n// Ether Units\r\n// Ethereum is the blockchain and Ether is the currency for Ethereum \r\n\r\ncontract learnEtherUnits {\r\n    \r\n    function test() public {\r\n    \r\n    // wei is the smallest denomination of ether    \r\n    assert(1000000000000000000 wei == 1 ether); // 10^18 wei = 1 eth\r\n    assert(1 wei == 1); // 1 wei = 1 \r\n    \r\n    assert(1 ether == 1e18);\r\n    // 1 ether == 1e18\r\n    // create an assertion for 2 eths to be equivalent to weis\r\n    assert(2 ether == 2000000000000000000 wei); \r\n    }\r\n    \r\n    \r\n    function exercise() public {\r\n        \r\n        assert(1 minutes == 60 seconds);\r\n        assert(24 hours == 1440 minutes);\r\n        assert(1 days == 24 hours);\r\n        assert(1 weeks == 7 days);\r\n        \r\n        assert(10 == 9 + 1);\r\n    }  \r\n}\r\n\r\n\r\n// Similar to currency, Solidity has time units where lowest unit is second and we can use seconds, \r\n// minutes, hours, days and weeks as suffix to denote time.\r\n\r\n// Exercise - Create the following assertions in a function called exercise:\r\n// Assert equivalencies for minutes to seconds, hours to minutes, days to hours, and weeks to days"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/assert-test-method.sol": {
				"learnEtherUnits": {
					"abi": [
						{
							"inputs": [],
							"name": "exercise",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "test",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/assert-test-method.sol\":165:843  contract learnEtherUnits {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/assert-test-method.sol\":165:843  contract learnEtherUnits {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xd32cb0fe\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xf8a8fd6d\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/assert-test-method.sol\":595:838  function exercise() public {... */\n    tag_3:\n      tag_5\n      tag_6\n      jump\t// in\n    tag_5:\n      stop\n        /* \"contracts/assert-test-method.sol\":203:577  function test() public {... */\n    tag_4:\n      tag_7\n      tag_8\n      jump\t// in\n    tag_7:\n      stop\n        /* \"contracts/assert-test-method.sol\":595:838  function exercise() public {... */\n    tag_6:\n        /* \"contracts/assert-test-method.sol\":663:673  60 seconds */\n      0x3c\n        /* \"contracts/assert-test-method.sol\":650:659  1 minutes */\n      dup1\n        /* \"contracts/assert-test-method.sol\":650:673  1 minutes == 60 seconds */\n      eq\n        /* \"contracts/assert-test-method.sol\":643:674  assert(1 minutes == 60 seconds) */\n      tag_10\n      jumpi\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n    tag_10:\n        /* \"contracts/assert-test-method.sol\":704:716  1440 minutes */\n      0x015180\n        /* \"contracts/assert-test-method.sol\":692:700  24 hours */\n      dup1\n        /* \"contracts/assert-test-method.sol\":692:716  24 hours == 1440 minutes */\n      eq\n        /* \"contracts/assert-test-method.sol\":685:717  assert(24 hours == 1440 minutes) */\n      tag_13\n      jumpi\n      tag_14\n      tag_12\n      jump\t// in\n    tag_14:\n    tag_13:\n        /* \"contracts/assert-test-method.sol\":745:753  24 hours */\n      0x015180\n        /* \"contracts/assert-test-method.sol\":735:741  1 days */\n      dup1\n        /* \"contracts/assert-test-method.sol\":735:753  1 days == 24 hours */\n      eq\n        /* \"contracts/assert-test-method.sol\":728:754  assert(1 days == 24 hours) */\n      tag_15\n      jumpi\n      tag_16\n      tag_12\n      jump\t// in\n    tag_16:\n    tag_15:\n        /* \"contracts/assert-test-method.sol\":783:789  7 days */\n      0x093a80\n        /* \"contracts/assert-test-method.sol\":772:779  1 weeks */\n      dup1\n        /* \"contracts/assert-test-method.sol\":772:789  1 weeks == 7 days */\n      eq\n        /* \"contracts/assert-test-method.sol\":765:790  assert(1 weeks == 7 days) */\n      tag_17\n      jumpi\n      tag_18\n      tag_12\n      jump\t// in\n    tag_18:\n    tag_17:\n        /* \"contracts/assert-test-method.sol\":824:829  9 + 1 */\n      0x0a\n        /* \"contracts/assert-test-method.sol\":818:820  10 */\n      dup1\n        /* \"contracts/assert-test-method.sol\":818:829  10 == 9 + 1 */\n      eq\n        /* \"contracts/assert-test-method.sol\":811:830  assert(10 == 9 + 1) */\n      tag_19\n      jumpi\n      tag_20\n      tag_12\n      jump\t// in\n    tag_20:\n    tag_19:\n        /* \"contracts/assert-test-method.sol\":595:838  function exercise() public {... */\n      jump\t// out\n        /* \"contracts/assert-test-method.sol\":203:577  function test() public {... */\n    tag_8:\n        /* \"contracts/assert-test-method.sol\":327:334  1 ether */\n      0x0de0b6b3a7640000\n        /* \"contracts/assert-test-method.sol\":300:323  1000000000000000000 wei */\n      dup1\n        /* \"contracts/assert-test-method.sol\":300:334  1000000000000000000 wei == 1 ether */\n      eq\n        /* \"contracts/assert-test-method.sol\":293:335  assert(1000000000000000000 wei == 1 ether) */\n      tag_22\n      jumpi\n      tag_23\n      tag_12\n      jump\t// in\n    tag_23:\n    tag_22:\n        /* \"contracts/assert-test-method.sol\":379:380  1 */\n      0x01\n        /* \"contracts/assert-test-method.sol\":370:375  1 wei */\n      dup1\n        /* \"contracts/assert-test-method.sol\":370:380  1 wei == 1 */\n      eq\n        /* \"contracts/assert-test-method.sol\":363:381  assert(1 wei == 1) */\n      tag_24\n      jumpi\n      tag_25\n      tag_12\n      jump\t// in\n    tag_25:\n    tag_24:\n        /* \"contracts/assert-test-method.sol\":426:430  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/assert-test-method.sol\":415:422  1 ether */\n      dup1\n        /* \"contracts/assert-test-method.sol\":415:430  1 ether == 1e18 */\n      eq\n        /* \"contracts/assert-test-method.sol\":408:431  assert(1 ether == 1e18) */\n      tag_26\n      jumpi\n      tag_27\n      tag_12\n      jump\t// in\n    tag_27:\n    tag_26:\n        /* \"contracts/assert-test-method.sol\":544:567  2000000000000000000 wei */\n      0x1bc16d674ec80000\n        /* \"contracts/assert-test-method.sol\":533:540  2 ether */\n      dup1\n        /* \"contracts/assert-test-method.sol\":533:567  2 ether == 2000000000000000000 wei */\n      eq\n        /* \"contracts/assert-test-method.sol\":526:568  assert(2 ether == 2000000000000000000 wei) */\n      tag_28\n      jumpi\n      tag_29\n      tag_12\n      jump\t// in\n    tag_29:\n    tag_28:\n        /* \"contracts/assert-test-method.sol\":203:577  function test() public {... */\n      jump\t// out\n        /* \"#utility.yul\":7:187   */\n    tag_12:\n        /* \"#utility.yul\":55:132   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":52:53   */\n      0x00\n        /* \"#utility.yul\":45:133   */\n      mstore\n        /* \"#utility.yul\":152:156   */\n      0x01\n        /* \"#utility.yul\":149:150   */\n      0x04\n        /* \"#utility.yul\":142:157   */\n      mstore\n        /* \"#utility.yul\":176:180   */\n      0x24\n        /* \"#utility.yul\":173:174   */\n      0x00\n        /* \"#utility.yul\":166:181   */\n      revert\n\n    auxdata: 0xa264697066735822122046ca68af8163e72a64a10eaf514fd23e10241322873798cf9789076e28e9090464736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061016c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d32cb0fe1461003b578063f8a8fd6d14610045575b600080fd5b61004361004f565b005b61004d6100ac565b005b603c80146100605761005f610107565b5b62015180801461007357610072610107565b5b62015180801461008657610085610107565b5b62093a80801461009957610098610107565b5b600a80146100aa576100a9610107565b5b565b670de0b6b3a764000080146100c4576100c3610107565b5b600180146100d5576100d4610107565b5b670de0b6b3a764000080146100ed576100ec610107565b5b671bc16d674ec80000801461010557610104610107565b5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea264697066735822122046ca68af8163e72a64a10eaf514fd23e10241322873798cf9789076e28e9090464736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD32CB0FE EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH2 0x45 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x4F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4D PUSH2 0xAC JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3C DUP1 EQ PUSH2 0x60 JUMPI PUSH2 0x5F PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x73 JUMPI PUSH2 0x72 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x86 JUMPI PUSH2 0x85 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH3 0x93A80 DUP1 EQ PUSH2 0x99 JUMPI PUSH2 0x98 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH1 0xA DUP1 EQ PUSH2 0xAA JUMPI PUSH2 0xA9 PUSH2 0x107 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xC4 JUMPI PUSH2 0xC3 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 EQ PUSH2 0xD5 JUMPI PUSH2 0xD4 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xED JUMPI PUSH2 0xEC PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH8 0x1BC16D674EC80000 DUP1 EQ PUSH2 0x105 JUMPI PUSH2 0x104 PUSH2 0x107 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0xCA PUSH9 0xAF8163E72A64A10EAF MLOAD 0x4F 0xD2 RETURNDATACOPY LT 0x24 SGT 0x22 DUP8 CALLDATACOPY SWAP9 0xCF SWAP8 DUP10 SMOD PUSH15 0x28E9090464736F6C63430008120033 ",
							"sourceMap": "165:678:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@exercise_65": {
									"entryPoint": 79,
									"id": 65,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@test_29": {
									"entryPoint": 172,
									"id": 29,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x01": {
									"entryPoint": 263,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:190:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "35:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "52:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "55:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "45:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "45:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "45:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "149:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "152:4:1",
																		"type": "",
																		"value": "0x01"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "142:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "142:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "142:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "173:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "176:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:15:1"
														}
													]
												},
												"name": "panic_error_0x01",
												"nodeType": "YulFunctionDefinition",
												"src": "7:180:1"
											}
										]
									},
									"contents": "{\n\n    function panic_error_0x01() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100365760003560e01c8063d32cb0fe1461003b578063f8a8fd6d14610045575b600080fd5b61004361004f565b005b61004d6100ac565b005b603c80146100605761005f610107565b5b62015180801461007357610072610107565b5b62015180801461008657610085610107565b5b62093a80801461009957610098610107565b5b600a80146100aa576100a9610107565b5b565b670de0b6b3a764000080146100c4576100c3610107565b5b600180146100d5576100d4610107565b5b670de0b6b3a764000080146100ed576100ec610107565b5b671bc16d674ec80000801461010557610104610107565b5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea264697066735822122046ca68af8163e72a64a10eaf514fd23e10241322873798cf9789076e28e9090464736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD32CB0FE EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH2 0x45 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x4F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4D PUSH2 0xAC JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3C DUP1 EQ PUSH2 0x60 JUMPI PUSH2 0x5F PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x73 JUMPI PUSH2 0x72 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x86 JUMPI PUSH2 0x85 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH3 0x93A80 DUP1 EQ PUSH2 0x99 JUMPI PUSH2 0x98 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH1 0xA DUP1 EQ PUSH2 0xAA JUMPI PUSH2 0xA9 PUSH2 0x107 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xC4 JUMPI PUSH2 0xC3 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 EQ PUSH2 0xD5 JUMPI PUSH2 0xD4 PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xED JUMPI PUSH2 0xEC PUSH2 0x107 JUMP JUMPDEST JUMPDEST PUSH8 0x1BC16D674EC80000 DUP1 EQ PUSH2 0x105 JUMPI PUSH2 0x104 PUSH2 0x107 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0xCA PUSH9 0xAF8163E72A64A10EAF MLOAD 0x4F 0xD2 RETURNDATACOPY LT 0x24 SGT 0x22 DUP8 CALLDATACOPY SWAP9 0xCF SWAP8 DUP10 SMOD PUSH15 0x28E9090464736F6C63430008120033 ",
							"sourceMap": "165:678:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;595:243;;;:::i;:::-;;203:374;;;:::i;:::-;;595:243;663:10;650:9;:23;643:31;;;;:::i;:::-;;704:12;692:8;:24;685:32;;;;:::i;:::-;;745:8;735:6;:18;728:26;;;;:::i;:::-;;783:6;772:7;:17;765:25;;;;:::i;:::-;;824:5;818:2;:11;811:19;;;;:::i;:::-;;595:243::o;203:374::-;327:7;300:23;:34;293:42;;;;:::i;:::-;;379:1;370:5;:10;363:18;;;;:::i;:::-;;426:4;415:7;:15;408:23;;;;:::i;:::-;;544;533:7;:34;526:42;;;;:::i;:::-;;203:374::o;7:180:1:-;55:77;52:1;45:88;152:4;149:1;142:15;176:4;173:1;166:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "72800",
								"executionCost": "123",
								"totalCost": "72923"
							},
							"external": {
								"exercise()": "237",
								"test()": "236"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 165,
									"end": 843,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 165,
									"end": 843,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 165,
									"end": 843,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 843,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 843,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 843,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 843,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 843,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 843,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 165,
									"end": 843,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 843,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122046ca68af8163e72a64a10eaf514fd23e10241322873798cf9789076e28e9090464736f6c63430008120033",
									".code": [
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH",
											"source": 0,
											"value": "D32CB0FE"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH",
											"source": 0,
											"value": "F8A8FD6D"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 165,
											"end": 843,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 165,
											"end": 843,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 595,
											"end": 838,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 595,
											"end": 838,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 595,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 595,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 595,
											"end": 838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 595,
											"end": 838,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 595,
											"end": 838,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 595,
											"end": 838,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 203,
											"end": 577,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 203,
											"end": 577,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 203,
											"end": 577,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 203,
											"end": 577,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 203,
											"end": 577,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 203,
											"end": 577,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 203,
											"end": 577,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 203,
											"end": 577,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 595,
											"end": 838,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 595,
											"end": 838,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 663,
											"end": 673,
											"name": "PUSH",
											"source": 0,
											"value": "3C"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 650,
											"end": 673,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 643,
											"end": 674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 643,
											"end": 674,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 643,
											"end": 674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 643,
											"end": 674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 643,
											"end": 674,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 643,
											"end": 674,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 643,
											"end": 674,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 643,
											"end": 674,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 643,
											"end": 674,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 704,
											"end": 716,
											"name": "PUSH",
											"source": 0,
											"value": "15180"
										},
										{
											"begin": 692,
											"end": 700,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 692,
											"end": 716,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 685,
											"end": 717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 685,
											"end": 717,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 685,
											"end": 717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 685,
											"end": 717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 685,
											"end": 717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 685,
											"end": 717,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 685,
											"end": 717,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 685,
											"end": 717,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 685,
											"end": 717,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 745,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "15180"
										},
										{
											"begin": 735,
											"end": 741,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 735,
											"end": 753,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 728,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 728,
											"end": 754,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 728,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 728,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 728,
											"end": 754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 728,
											"end": 754,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 728,
											"end": 754,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 728,
											"end": 754,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 728,
											"end": 754,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 783,
											"end": 789,
											"name": "PUSH",
											"source": 0,
											"value": "93A80"
										},
										{
											"begin": 772,
											"end": 779,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 772,
											"end": 789,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 765,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 765,
											"end": 790,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 765,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 765,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 765,
											"end": 790,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 765,
											"end": 790,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 765,
											"end": 790,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 765,
											"end": 790,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 765,
											"end": 790,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 824,
											"end": 829,
											"name": "PUSH",
											"source": 0,
											"value": "A"
										},
										{
											"begin": 818,
											"end": 820,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 818,
											"end": 829,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 811,
											"end": 830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 811,
											"end": 830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 811,
											"end": 830,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 811,
											"end": 830,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 811,
											"end": 830,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 811,
											"end": 830,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 595,
											"end": 838,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 203,
											"end": 577,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 203,
											"end": 577,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 327,
											"end": 334,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 300,
											"end": 323,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 300,
											"end": 334,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 293,
											"end": 335,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 293,
											"end": 335,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 293,
											"end": 335,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 293,
											"end": 335,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 293,
											"end": 335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 293,
											"end": 335,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 293,
											"end": 335,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 293,
											"end": 335,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 293,
											"end": 335,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 379,
											"end": 380,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 370,
											"end": 375,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 370,
											"end": 380,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 363,
											"end": 381,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 363,
											"end": 381,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 363,
											"end": 381,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 363,
											"end": 381,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 363,
											"end": 381,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 363,
											"end": 381,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 363,
											"end": 381,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 363,
											"end": 381,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 363,
											"end": 381,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 426,
											"end": 430,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 415,
											"end": 422,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 415,
											"end": 430,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 408,
											"end": 431,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 408,
											"end": 431,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 408,
											"end": 431,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 408,
											"end": 431,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 408,
											"end": 431,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 408,
											"end": 431,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 408,
											"end": 431,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 408,
											"end": 431,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 408,
											"end": 431,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 544,
											"end": 567,
											"name": "PUSH",
											"source": 0,
											"value": "1BC16D674EC80000"
										},
										{
											"begin": 533,
											"end": 540,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 533,
											"end": 567,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 526,
											"end": 568,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 526,
											"end": 568,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 526,
											"end": 568,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 526,
											"end": 568,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 526,
											"end": 568,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 526,
											"end": 568,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 526,
											"end": 568,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 526,
											"end": 568,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 526,
											"end": 568,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 203,
											"end": 577,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 187,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 7,
											"end": 187,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 55,
											"end": 132,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 52,
											"end": 53,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 45,
											"end": 133,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 152,
											"end": 156,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 149,
											"end": 150,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 142,
											"end": 157,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 180,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 173,
											"end": 174,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 166,
											"end": 181,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"contracts/assert-test-method.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"exercise()": "d32cb0fe",
							"test()": "f8a8fd6d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"exercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assert-test-method.sol\":\"learnEtherUnits\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/assert-test-method.sol\":{\"keccak256\":\"0x1ece21e4599731e8528ccbfdfbf6ec8a3fcd7a44a316bc071c1726e84103f3d0\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d1846be298c8216639901ce147770f5aced0532f5c9c08637e604f5aebc4ebc3\",\"dweb:/ipfs/Qmdt27nH4APUjHnVRoYDXVZRCXDk4NsBBtpvT81mQPDamj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n  --> contracts/assert-test-method.sol:10:5:\n   |\n10 |     function test() public {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 577,
					"file": "contracts/assert-test-method.sol",
					"start": 203
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n  --> contracts/assert-test-method.sol:23:5:\n   |\n23 |     function exercise() public {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 838,
					"file": "contracts/assert-test-method.sol",
					"start": 595
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/assert-test-method.sol": {
				"ast": {
					"absolutePath": "contracts/assert-test-method.sol",
					"exportedSymbols": {
						"learnEtherUnits": [
							66
						]
					},
					"id": 67,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:33:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "learnEtherUnits",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 66,
							"linearizedBaseContracts": [
								66
							],
							"name": "learnEtherUnits",
							"nameLocation": "174:15:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "226:351:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 7,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31303030303030303030303030303030303030",
																"id": 5,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "300:23:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1000000000000000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 6,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "327:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"src": "300:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 4,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "293:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 8,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "293:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 9,
												"nodeType": "ExpressionStatement",
												"src": "293:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 13,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 11,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "370:5:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 12,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "379:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "370:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 10,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "363:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "363:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 15,
												"nodeType": "ExpressionStatement",
												"src": "363:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 17,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "415:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 18,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "426:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "415:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 16,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "408:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "408:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "408:23:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 25,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "533:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2000000000000000000_by_1",
																	"typeString": "int_const 2000000000000000000"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "32303030303030303030303030303030303030",
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "544:23:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2000000000000000000_by_1",
																	"typeString": "int_const 2000000000000000000"
																},
																"value": "2000000000000000000"
															},
															"src": "533:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 22,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "526:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "526:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "526:42:0"
											}
										]
									},
									"functionSelector": "f8a8fd6d",
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "test",
									"nameLocation": "212:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "216:2:0"
									},
									"returnParameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "226:0:0"
									},
									"scope": 66,
									"src": "203:374:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 64,
										"nodeType": "Block",
										"src": "622:216:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "650:9:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3630",
																"id": 34,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "663:10:0",
																"subdenomination": "seconds",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "60"
															},
															"src": "650:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 32,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "643:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "643:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "643:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3234",
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "692:8:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "24"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31343430",
																"id": 40,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "704:12:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "1440"
															},
															"src": "692:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 38,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "685:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "685:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "685:32:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 45,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "735:6:0",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3234",
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "745:8:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "24"
															},
															"src": "735:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 44,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "728:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "728:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "728:26:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "772:7:0",
																"subdenomination": "weeks",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_604800_by_1",
																	"typeString": "int_const 604800"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "37",
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "783:6:0",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_604800_by_1",
																	"typeString": "int_const 604800"
																},
																"value": "7"
															},
															"src": "772:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 50,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "765:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "765:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "765:25:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 61,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 57,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "818:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 60,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "39",
																	"id": 58,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "824:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_9_by_1",
																		"typeString": "int_const 9"
																	},
																	"value": "9"
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 59,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "828:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "824:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "818:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 56,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "811:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 62,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "811:19:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 63,
												"nodeType": "ExpressionStatement",
												"src": "811:19:0"
											}
										]
									},
									"functionSelector": "d32cb0fe",
									"id": 65,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "exercise",
									"nameLocation": "604:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:2:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "622:0:0"
									},
									"scope": 66,
									"src": "595:243:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 67,
							"src": "165:678:0",
							"usedErrors": []
						}
					],
					"src": "39:1151:0"
				},
				"id": 0
			}
		}
	}
}